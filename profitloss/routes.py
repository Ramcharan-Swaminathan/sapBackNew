from flask import Blueprint, jsonify, request

# Create the blueprint
profitloss_bp = Blueprint('profitloss', __name__)

@profitloss_bp.route('/stats', methods=['GET'])
def get_stats():
    """Get profit and loss statistics"""
    # Dummy response based on frontend requirements
    response = {
        "Total Revanue": 45000,
        "Total Expenses": 32000,
        "Net Profit": 13000,
        "Profit Margin": 29
    }
    return jsonify(response)

@profitloss_bp.route('/revenue', methods=['GET'])
def get_revenue():
    """Get revenue details"""
    # Dummy response
    response = {
        "success": True,
        "data": {
            "revenue_by_category": {
                "dairy": 8500,
                "produce": 12000,
                "meat": 15000,
                "bakery": 5500,
                "frozen": 4000
            },
            "top_selling_items": [
                {"name": "Organic Eggs", "revenue": 2200},
                {"name": "Premium Beef", "revenue": 1800},
                {"name": "Fresh Bread", "revenue": 1500}
            ],
            "revenue_trend": [42000, 43500, 41000, 44500, 45000]
        }
    }
    return jsonify(response)

@profitloss_bp.route('/expenses', methods=['GET'])
def get_expenses():
    """Get expense details"""
    # Dummy response
    response = {
        "success": True,
        "data": {
            "expenses_by_category": {
                "inventory": 22000,
                "labor": 6500,
                "utilities": 1800,
                "rent": 1500,
                "equipment": 200
            },
            "expense_trend": [30000, 31200, 30500, 31800, 32000],
            "highest_expense_items": [
                {"name": "Meat Products", "cost": 8500},
                {"name": "Staff Wages", "cost": 6500},
                {"name": "Dairy Products", "cost": 5000}
            ]
        }
    }
    return jsonify(response)

@profitloss_bp.route('/financialinsight', methods=['GET'])
def get_financial_insight():
    """Get financial insights generated by LLM"""
    # Response based on GenAI as specified
    response = {
        "Revenue Growth": "5.9%",
        "Profit Margin Trend": "Increasing at 0.7% per month",
        "Cost Reduction Opportunities": [
            "Optimize inventory management to reduce waste",
            "Consider bulk purchasing for high-volume ingredients",
            "Review utility usage patterns for potential savings"
        ],
        "Forecasted Growth": "7.2% increase expected next quarter",
        "Market Comparison": "Performing 3.7% above industry average",
        "Risk Factors": [
            "Seasonal fluctuations may impact Q3 revenue",
            "Rising ingredient costs could affect profit margins",
            "Labor market changes may increase staffing costs"
        ],
        "Recommendations": [
            "Introduce seasonal menu items to boost sales",
            "Implement inventory tracking system to reduce waste",
            "Consider loyalty program to increase customer retention"
        ]
    }
    return jsonify(response)

@profitloss_bp.route('/revenue-expenses', methods=['GET', 'POST'])
def get_revenue_expenses():
    """Get revenue and expenses by BaseType and BaseCount"""
    try:
        # Default values
        base_type = 'M'  # Monthly
        base_count = 3
        
        # Handle POST request with parameters
        if request.method == 'POST' and request.is_json:
            data = request.get_json()
            
            # Validate required fields
            if 'BaseType' not in data or 'BaseCount' not in data:
                return jsonify({"success": False, "error": "Missing required fields: BaseType and BaseCount"}), 400
                
            # Validate BaseType is one of the allowed values
            if data['BaseType'] not in ['W', 'M', 'Y', 'D']:
                return jsonify({"success": False, "error": "BaseType must be W, M, Y, or D"}), 400
                
            base_type = data['BaseType']
            base_count = data['BaseCount']
        
        # Prepare response based on BaseType and BaseCount
        # In a real app, this would query the database for the specified time periods
        
        # Generate dummy data based on the requested base_type and base_count
        revenue_amounts = [45000, 42500, 41000][:base_count]
        expense_amounts = [32000, 30500, 29000][:base_count]
        
        if base_count > 3:
            # Generate additional dummy data if base_count > 3
            for i in range(3, base_count):
                revenue_amounts.append(40000 + (i * 1000))
                expense_amounts.append(28000 + (i * 800))
        
        # Revenue response
        revenue_response = {
            "Amount": revenue_amounts,
            "Category": [
                {"Food Items": 25000},
                {"Beverages": 15000},
                {"Other": 5000}
            ]
        }
        
        # Expenses response
        expenses_response = {
            "Amount": expense_amounts,
            "Category": [
                {"Employee": 15000},
                {"Ingrediants": 12000},
                {"Other": 5000}
            ]
        }
        
        response = {
            "Revenue": revenue_response,
            "Expenses": expenses_response
        }
        
        return jsonify(response)
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500
